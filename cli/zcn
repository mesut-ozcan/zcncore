#!/usr/bin/env php
<?php
/**
 * ZCNCore CLI
 * Usage:
 *   php cli/zcn <command> [args]
 */

/* ---------- Proje kökü ---------- */
$__base = realpath(__DIR__ . '/..');
if ($__base === false) {
    $__base = dirname(__DIR__);
}
define('ZCN_BASE', $__base);

/* ---------- Autoload ---------- */
spl_autoload_register(function ($class) {
    $map = [
        'Core\\'    => ZCN_BASE . '/core/',
        'App\\'     => ZCN_BASE . '/app/',
        'Modules\\' => ZCN_BASE . '/modules/',
    ];
    foreach ($map as $prefix => $dir) {
        if (strncmp($class, $prefix, strlen($prefix)) === 0) {
            $rel  = substr($class, strlen($prefix));
            $file = $dir . str_replace('\\', '/', $rel) . '.php';
            if (is_file($file)) { require $file; return; }
        }
    }
});

/* ---------- Yardımcılar ---------- */
function cli_out(string $msg, int $exit = null) {
    fwrite(STDOUT, $msg);
    if ($exit !== null) exit($exit);
}
function cli_err(string $msg, int $exit = 1) {
    fwrite(STDERR, $msg);
    exit($exit);
}
function base_path(string $p = ''): string {
    // Windows/Unix uyumlu birleştirme
    $left = rtrim(ZCN_BASE, "/\\");
    $right = ltrim($p, "/\\");
    return $right === '' ? $left : $left . DIRECTORY_SEPARATOR . $right;
}

/* ---------- Bootstrap: Env + Config ---------- */
try {
    if (class_exists(\Core\Env::class)) {
        \Core\Env::load(base_path('.env'));
    }
    if (class_exists(\Core\Config::class)) {
        \Core\Config::init(base_path('app/Config'), ZCN_BASE);
    }
    // NOT: Application örneği OLUŞTURMUYORUZ (ctor private olabilir)
} catch (\Throwable $e) {
    cli_err("[boot] ".$e->getMessage().PHP_EOL);
}

/* ---------- Argümanlar ---------- */
$argv = $_SERVER['argv'] ?? [];
$cmd  = $argv[1] ?? 'help';
$arg1 = $argv[2] ?? null;
$arg2 = $argv[3] ?? null;

/* ---------- Komutlar ---------- */
switch ($cmd) {
    case 'help':
    case '-h':
    case '--help':
        cli_out(<<<TXT
ZCNCore CLI

Kullanım:
  php cli/zcn <komut> [argümanlar]

Genel:
  help                         Bu yardım
  version                      Çekirdek sürümü (bilgi amaçlı)

Geliştirme:
  serve [host:port]            Built-in dev server (public/ docroot)

Config:
  config:cache                 Config dosyalarını cache'e yazar
  config:clear                 Config cache temizler

Veritabanı (Migrations):
  migrate                      Tüm bekleyen migration'ları uygular
  migrate:status               Migration durumunu listeler
  migrate:rollback             Son batch'i geri alır
  make:migration <Name>        Yeni migration iskeleti oluşturur

Queue:
  queue:work [max] [sleep]     File driver kuyruğunu tüket (max iş / uyku sn)

TXT
        , 0);
        break;

    case 'version':
        // Application private ctor olabilir; güvenli yol: Config veya fallback
        $v = \Core\Config::get('app.version');
        if (!$v && class_exists(\Core\Application::class)) {
            // Erişilebilir bir sabit/yöntem yoksa "unknown" göster.
            $v = 'unknown';
        }
        cli_out("ZCNCore version: ".($v ?: 'unknown')."\n", 0);
        break;

    /* ---------- DEV SERVER ---------- */
    case 'serve':
        $host = $arg1 ?: '127.0.0.1:8000';
        if (!preg_match('/^\d{1,3}(\.\d{1,3}){3}:\d{2,5}$/', $host)) {
            $host = '127.0.0.1:8000';
        }
        $docroot = base_path('public');
        cli_out("Dev server: http://{$host}\nDocroot: {$docroot}\nCtrl+C ile durdur.\n");
        $cmdline = 'php -S ' . $host . ' -t ' . escapeshellarg($docroot);
        passthru($cmdline, $code);
        exit($code);

    /* ---------- CONFIG CACHE ---------- */
    case 'config:cache':
        try {
            \Core\Config::cache();
            cli_out("Config cached.\n", 0);
        } catch (\Throwable $e) {
            cli_err("Config cache error: ".$e->getMessage()."\n");
        }
        break;

    case 'config:clear':
        try {
            \Core\Config::clearCache();
            cli_out("Config cache cleared.\n", 0);
        } catch (\Throwable $e) {
            cli_err("Config clear error: ".$e->getMessage()."\n");
        }
        break;

    /* ---------- MIGRATIONS ---------- */
    case 'migrate':
        try {
            if (class_exists(\Core\Database\Migrator::class)) {
                \Core\Database\Migrator::migrate();
                cli_out("Migration complete.\n", 0);
            } else {
                cli_err("Migrator bulunamadı: Core\\Database\\Migrator\n");
            }
        } catch (\Throwable $e) {
            cli_err("Migrate error: ".$e->getMessage()."\n");
        }
        break;

    case 'migrate:status':
        try {
            if (class_exists(\Core\Database\Migrator::class)) {
                \Core\Database\Migrator::status();
                exit(0);
            } else {
                cli_err("Migrator bulunamadı: Core\\Database\\Migrator\n");
            }
        } catch (\Throwable $e) {
            cli_err("Status error: ".$e->getMessage()."\n");
        }
        break;

    case 'migrate:rollback':
        try {
            if (class_exists(\Core\Database\Migrator::class)) {
                \Core\Database\Migrator::rollback();
                cli_out("Rollback complete.\n", 0);
            } else {
                cli_err("Migrator bulunamadı: Core\\Database\\Migrator\n");
            }
        } catch (\Throwable $e) {
            cli_err("Rollback error: ".$e->getMessage()."\n");
        }
        break;

    case 'make:migration':
        $name = $arg1 ?: null;
        if (!$name) cli_err("Kullanım: php cli/zcn make:migration <Name>\n");
        try {
            if (class_exists(\Core\Database\Migrator::class)) {
                \Core\Database\Migrator::make($name);
                cli_out("Created migration: {$name}\n", 0);
            } else {
                // Basit fallback: dosya oluştur
                $ts = date('Ymd_His');
                $dir = base_path('database/migrations');
                if (!is_dir($dir)) @mkdir($dir, 0777, true);
                $file = $dir . '/' . $ts . '_' . preg_replace('/\W+/', '_', $name) . '.php';
                $tpl = <<<PHP
<?php
return new class {
    public function up(\\PDO \$db): void
    {
        // TODO: up
    }
    public function down(\\PDO \$db): void
    {
        // TODO: down
    }
};
PHP;
                file_put_contents($file, $tpl);
                cli_out("Created migration (fallback): {$file}\n", 0);
            }
        } catch (\Throwable $e) {
            cli_err("Make migration error: ".$e->getMessage()."\n");
        }
        break;

    /* ---------- QUEUE WORKER ---------- */
    case 'queue:work':
        $max   = (int)($arg1 ?? 0);
        $sleep = (int)($arg2 ?? 2);
        try {
            if (!class_exists(\Core\Queue\Queue::class)) {
                cli_err("Queue modülü bulunamadı: Core\\Queue\\Queue\n");
            }
            cli_out("Queue worker started (max={$max}, sleep={$sleep}s)\n");
            \Core\Queue\Queue::work($max, $sleep);
            cli_out("Queue worker finished.\n", 0);
        } catch (\Throwable $e) {
            cli_err("Queue error: ".$e->getMessage()."\n");
        }
        break;

    /* ---------- BİLİNMEYEN ---------- */
    default:
        cli_err("Bilinmeyen komut: {$cmd}\n'php cli/zcn help' ile komutları görebilirsin.\n");
}
