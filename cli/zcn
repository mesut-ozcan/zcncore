<?php
// zcncore CLI (Windows/WAMP uyumlu)

// 1) Hataları görünür yap
error_reporting(E_ALL);
ini_set('display_errors', '1');

// 2) Proje kökünü çöz
$base = realpath(__DIR__ . '/..');
if ($base === false) {
    fwrite(STDERR, "[boot] Base path resolve failed\n");
    exit(1);
}
define('ZCN_BASE', $base);

// 3) Yardımcı base_path()
function base_path(string $p = ''): string {
    return rtrim(ZCN_BASE, "/\\") . ($p ? DIRECTORY_SEPARATOR . ltrim($p, "/\\") : '');
}

// 4) Çekirdek sınıfları yükle (env() çağrılmadan önce Helpers/env hazır olmalı!)
require_once base_path('core/Env.php');

// env() helper yoksa minimal bir alias tanımla (Helpers'i yüklemeden de çalışsın)
if (!function_exists('env')) {
    function env(string $key, $default = null) {
        return \Core\Env::get($key, $default);
    }
}

require_once base_path('core/Helpers.php');
require_once base_path('core/Config.php');
require_once base_path('core/Logger.php');
require_once base_path('core/Cache.php');
require_once base_path('core/Events.php');
require_once base_path('core/Head.php');
require_once base_path('core/Application.php');
require_once base_path('core/Request.php');
require_once base_path('core/Response.php');
require_once base_path('core/Router.php');

// DB & Migrator (varsa)
$dbc = base_path('core/Database/Connection.php');
if (is_file($dbc)) require_once $dbc;
$mgr = base_path('core/Database/Migrator.php');
if (is_file($mgr)) require_once $mgr;

// Queue (varsa)
$qif = base_path('core/Queue/Queue.php');
if (is_file($qif)) require_once $qif;

// 5) .env ve config yüklenmeden önce Env::load çağrısı
try {
    \Core\Env::load(base_path('.env'));
    \Core\Config::init(base_path('app/Config'), base_path());
} catch (\Throwable $e) {
    fwrite(STDERR, "[boot] ".$e->getMessage()."\n");
    // devam et; Application::boot da tekrar deneyebilir
}

// 6) Uygulamayı boot et
try {
    \Core\Application::boot(base_path());
} catch (\Throwable $e) {
    fwrite(STDERR, "[boot] ".$e->getMessage()."\n");
    exit(1);
}

// 7) Komutlar
$argv = $_SERVER['argv'] ?? [];
$cmd  = $argv[1] ?? 'help';

// Küçük yardımcılar
function line($msg) { echo $msg . PHP_EOL; }

switch ($cmd) {
    case 'help':
    case '--help':
    case '-h':
        line("ZCNCore CLI");
        line("Usage: php cli/zcn <command>");
        line("");
        line("Commands:");
        line("  help                 Bu yardımı göster");
        line("  version              Sürümü göster");
        line("  serve                PHP built-in server (dev)");
        line("  config:cache         Config cache oluştur");
        line("  config:clear         Config cache temizle");
        line("  migrate              Tüm migration'ları çalıştır");
        line("  migrate:status       Migration durumunu göster");
        line("  migrate:rollback     Son batch'i geri al");
        line("  make:migration <N>   Boş migration dosyası oluştur");
        // Queue komutları varsa:
        if (class_exists(\Core\Queue\Queue::class)) {
            line("  queue:work           Kuyruk işçisini çalıştır (file driver)");
        }
        exit(0);

    case 'version':
        line("ZCNCore " . \Core\Application::get()->version());
        exit(0);

    case 'serve':
        $host = '127.0.0.1';
        $port = 8000;
        line("Dev server: http://{$host}:{$port}");
        // Windows'ta path ayırıcıları düzelterek çalıştır
        $docroot = base_path('public');
        $cmdline = sprintf('php -S %s:%d -t "%s"', $host, $port, $docroot);
        passthru($cmdline);
        exit(0);

    case 'config:cache':
        try {
            \Core\Config::cacheWrite();
            line("Config cache yazıldı.");
        } catch (\Throwable $e) {
            line("config:cache error: ".$e->getMessage());
            exit(1);
        }
        exit(0);

    case 'config:clear':
        try {
            \Core\Config::cacheClear();
            line("Config cache temizlendi.");
        } catch (\Throwable $e) {
            line("config:clear error: ".$e->getMessage());
            exit(1);
        }
        exit(0);

    case 'migrate':
    case 'migrate:status':
    case 'migrate:rollback':
    case 'make:migration':
        if (!class_exists(\Core\Database\Migrator::class)) {
            line("Migrator yok: core/Database/Migrator.php bulunamadı.");
            exit(1);
        }
        $pdo = \Core\Database\Connection::getInstance()->pdo();
        $migrator = new \Core\Database\Migrator($pdo, base_path('database/migrations'));
        try {
            if ($cmd === 'migrate') {
                $migrator->migrate();
            } elseif ($cmd === 'migrate:status') {
                $migrator->status();
            } elseif ($cmd === 'migrate:rollback') {
                $migrator->rollback();
            } elseif ($cmd === 'make:migration') {
                $name = $argv[2] ?? null;
                if (!$name) {
                    line("Kullanım: php cli/zcn make:migration <Name>");
                    exit(1);
                }
                $migrator->make($name);
            }
        } catch (\Throwable $e) {
            line(($cmd === 'migrate' ? "Migrate" :
                 ($cmd === 'migrate:status' ? "Status" :
                 ($cmd === 'migrate:rollback' ? "Rollback" : "Make")))." error: ".$e->getMessage());
            exit(1);
        }
        exit(0);

    case 'queue:work':
        if (!class_exists(\Core\Queue\Queue::class)) {
            line("Queue modülü yok.");
            exit(1);
        }
        \Core\Queue\Queue::work();
        exit(0);

    default:
        line("Bilinmeyen komut: {$cmd}");
        line("Yardım için: php cli/zcn help");
        exit(1);
}
